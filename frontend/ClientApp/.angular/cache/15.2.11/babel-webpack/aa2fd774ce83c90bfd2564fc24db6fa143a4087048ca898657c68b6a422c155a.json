{"ast":null,"code":"import alignPoint from './align-point';\nimport collision from './collision';\nconst fit = function (position, size, viewPortSize) {\n  let output = 0;\n  if (position + size > viewPortSize) {\n    output = viewPortSize - (position + size);\n  }\n  if (position < 0) {\n    output = -position;\n  }\n  return output;\n};\nconst flip = function ({\n  offset,\n  size,\n  anchorSize,\n  viewPortSize,\n  anchorAlignPoint,\n  elementAlignPoint,\n  margin\n}) {\n  let output = 0;\n  const isPositionCentered = elementAlignPoint === alignPoint.center || elementAlignPoint === alignPoint.middle;\n  const isOriginCentered = anchorAlignPoint === alignPoint.center || anchorAlignPoint === alignPoint.middle;\n  const marginToAdd = 2 * margin; //2x to keep margin after flip\n\n  if (elementAlignPoint !== anchorAlignPoint && !isPositionCentered && !isOriginCentered) {\n    const isBeforeAnchor = anchorAlignPoint === alignPoint.top || anchorAlignPoint === alignPoint.left;\n    if (offset < 0 && isBeforeAnchor) {\n      output = size + anchorSize + marginToAdd;\n      if (offset + output + size > viewPortSize) {\n        output = 0; //skip flip\n      }\n    } else if (offset >= 0 && !isBeforeAnchor) {\n      if (offset + size > viewPortSize) {\n        output += -(anchorSize + size + marginToAdd);\n      }\n      if (offset + output < 0) {\n        output = 0; //skip flip\n      }\n    }\n  }\n\n  return output;\n};\nconst restrictToView = options => {\n  const {\n    anchorRect,\n    anchorAlign,\n    elementRect,\n    elementAlign,\n    collisions,\n    viewPort,\n    margin = {}\n  } = options;\n  const {\n    top: elementTop,\n    left: elementLeft,\n    height: elementHeight,\n    width: elementWidth\n  } = elementRect;\n  const {\n    height: viewPortHeight,\n    width: viewPortWidth\n  } = viewPort;\n  const horizontalMargin = margin.horizontal || 0;\n  const verticalMargin = margin.vertical || 0;\n  let left = 0;\n  let top = 0;\n  const isVerticalFit = collisions.vertical === collision.fit;\n  const isHorizontalFit = collisions.horizontal === collision.fit;\n  const isVerticalFlip = collisions.vertical === collision.flip;\n  const isHorizontalFlip = collisions.horizontal === collision.flip;\n  if (isVerticalFit) {\n    top += fit(elementTop, elementHeight, viewPortHeight);\n  }\n  if (isHorizontalFit) {\n    left += fit(elementLeft, elementWidth, viewPortWidth);\n  }\n  if (isVerticalFlip) {\n    top += flip({\n      margin: verticalMargin,\n      offset: elementTop,\n      size: elementHeight,\n      anchorSize: anchorRect.height,\n      viewPortSize: viewPortHeight,\n      anchorAlignPoint: anchorAlign.vertical,\n      elementAlignPoint: elementAlign.vertical\n    });\n  }\n  if (isHorizontalFlip) {\n    left += flip({\n      margin: horizontalMargin,\n      offset: elementLeft,\n      size: elementWidth,\n      anchorSize: anchorRect.width,\n      viewPortSize: viewPortWidth,\n      anchorAlignPoint: anchorAlign.horizontal,\n      elementAlignPoint: elementAlign.horizontal\n    });\n  }\n  const flippedVertical = isVerticalFlip && top !== 0;\n  const flippedHorizontal = isHorizontalFlip && left !== 0;\n  const fittedVertical = isVerticalFit && top !== 0;\n  const fittedHorizontal = isHorizontalFit && left !== 0;\n  return {\n    flipped: flippedHorizontal || flippedVertical,\n    fitted: fittedVertical || fittedHorizontal,\n    flip: {\n      horizontal: flippedHorizontal,\n      vertical: flippedVertical\n    },\n    fit: {\n      horizontal: fittedHorizontal,\n      vertical: fittedVertical\n    },\n    offset: {\n      left: left,\n      top: top\n    }\n  };\n};\nexport default restrictToView;","map":{"version":3,"names":["alignPoint","collision","fit","position","size","viewPortSize","output","flip","offset","anchorSize","anchorAlignPoint","elementAlignPoint","margin","isPositionCentered","center","middle","isOriginCentered","marginToAdd","isBeforeAnchor","top","left","restrictToView","options","anchorRect","anchorAlign","elementRect","elementAlign","collisions","viewPort","elementTop","elementLeft","height","elementHeight","width","elementWidth","viewPortHeight","viewPortWidth","horizontalMargin","horizontal","verticalMargin","vertical","isVerticalFit","isHorizontalFit","isVerticalFlip","isHorizontalFlip","flippedVertical","flippedHorizontal","fittedVertical","fittedHorizontal","flipped","fitted"],"sources":["/Users/teqnoid/Projects/teachingchannel/node_modules/@progress/kendo-popup-common/dist/es2015/restrict-to-view.js"],"sourcesContent":["import alignPoint from './align-point';\nimport collision from './collision';\n\nconst fit = function(position, size, viewPortSize) {\n    let output = 0;\n\n    if (position + size > viewPortSize) {\n        output = viewPortSize - (position + size);\n    }\n\n    if (position < 0) {\n        output = -position;\n    }\n\n    return output;\n};\n\nconst flip = function({ offset, size, anchorSize, viewPortSize, anchorAlignPoint, elementAlignPoint, margin }) {\n    let output = 0;\n\n    const isPositionCentered = elementAlignPoint === alignPoint.center || elementAlignPoint === alignPoint.middle;\n    const isOriginCentered = anchorAlignPoint === alignPoint.center || anchorAlignPoint === alignPoint.middle;\n    const marginToAdd = 2 * margin; //2x to keep margin after flip\n\n    if (elementAlignPoint !== anchorAlignPoint && !isPositionCentered && !isOriginCentered) {\n        const isBeforeAnchor = anchorAlignPoint === alignPoint.top || anchorAlignPoint === alignPoint.left;\n        if (offset < 0 && isBeforeAnchor) {\n            output = size + anchorSize + marginToAdd;\n            if (offset + output + size > viewPortSize) {\n                output = 0; //skip flip\n            }\n        } else if (offset >= 0 && !isBeforeAnchor) {\n            if (offset + size > viewPortSize) {\n                output += -(anchorSize + size + marginToAdd);\n            }\n\n            if (offset + output < 0) {\n                output = 0; //skip flip\n            }\n        }\n    }\n\n    return output;\n};\n\nconst restrictToView = (options) => {\n    const { anchorRect, anchorAlign, elementRect, elementAlign, collisions, viewPort, margin = {} } = options;\n    const { top: elementTop, left: elementLeft, height: elementHeight, width: elementWidth } = elementRect;\n    const { height: viewPortHeight, width: viewPortWidth } = viewPort;\n    const horizontalMargin = margin.horizontal || 0;\n    const verticalMargin = margin.vertical || 0;\n\n    let left = 0;\n    let top = 0;\n\n    const isVerticalFit = collisions.vertical === collision.fit;\n    const isHorizontalFit = collisions.horizontal === collision.fit;\n    const isVerticalFlip = collisions.vertical === collision.flip;\n    const isHorizontalFlip = collisions.horizontal === collision.flip;\n\n    if (isVerticalFit) {\n        top += fit(elementTop, elementHeight, viewPortHeight);\n    }\n\n    if (isHorizontalFit) {\n        left += fit(elementLeft, elementWidth, viewPortWidth);\n    }\n\n    if (isVerticalFlip) {\n        top += flip({\n            margin: verticalMargin,\n            offset: elementTop,\n            size: elementHeight,\n            anchorSize: anchorRect.height,\n            viewPortSize: viewPortHeight,\n            anchorAlignPoint: anchorAlign.vertical,\n            elementAlignPoint: elementAlign.vertical\n        });\n    }\n\n    if (isHorizontalFlip) {\n        left += flip({\n            margin: horizontalMargin,\n            offset: elementLeft,\n            size: elementWidth,\n            anchorSize: anchorRect.width,\n            viewPortSize: viewPortWidth,\n            anchorAlignPoint: anchorAlign.horizontal,\n            elementAlignPoint: elementAlign.horizontal\n        });\n    }\n\n    const flippedVertical = isVerticalFlip && top !== 0;\n    const flippedHorizontal = isHorizontalFlip && left !== 0;\n    const fittedVertical = isVerticalFit && top !== 0;\n    const fittedHorizontal = isHorizontalFit && left !== 0;\n\n    return {\n        flipped: flippedHorizontal || flippedVertical,\n        fitted: fittedVertical || fittedHorizontal,\n        flip: {\n            horizontal: flippedHorizontal,\n            vertical: flippedVertical\n        },\n        fit: {\n            horizontal: fittedHorizontal,\n            vertical: fittedVertical\n        },\n        offset: {\n            left: left,\n            top: top\n        }\n    };\n};\n\nexport default restrictToView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}