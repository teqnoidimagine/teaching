{"ast":null,"code":"import { localeInfo, localeCurrency, currencyDisplays } from '../cldr';\nimport { PERCENT, NUMBER_PLACEHOLDER, CURRENCY_PLACEHOLDER, DEFAULT_LOCALE, EMPTY, POINT } from '../common/constants';\nimport { setStyleOptions, setFormatLiterals } from './utils';\nimport isNumber from '../common/is-number';\nimport isCurrencyStyle from './is-currency-style';\nimport formatOptions from './format-options';\nimport isString from '../common/is-string';\nconst exponentRegExp = /[eE][-+]?[0-9]+/;\nconst nonBreakingSpaceRegExp = /\\u00A0/g;\nfunction cleanNegativePattern(number, patterns) {\n  if (patterns.length > 1) {\n    const parts = (patterns[1] || EMPTY).replace(CURRENCY_PLACEHOLDER, EMPTY).split(NUMBER_PLACEHOLDER);\n    if (number.indexOf(parts[0]) > -1 && number.indexOf(parts[1]) > -1) {\n      return number.replace(parts[0], EMPTY).replace(parts[1], EMPTY);\n    }\n  }\n}\nfunction cleanCurrencyNumber(value, info, format) {\n  const options = formatOptions(format) || {};\n  let isCurrency = isCurrencyStyle(options.style);\n  let number = value;\n  let negative;\n  const currency = options.currency || localeCurrency(info, isCurrency);\n  if (currency) {\n    const displays = currencyDisplays(info, currency, isCurrency);\n    if (displays) {\n      for (let idx = 0; idx < displays.length; idx++) {\n        let display = displays[idx];\n        if (number.includes(display)) {\n          number = number.replace(display, EMPTY);\n          isCurrency = true;\n          break;\n        }\n      }\n    }\n    if (isCurrency) {\n      const cleanNumber = cleanNegativePattern(number, info.numbers.currency.patterns) || cleanNegativePattern(number, info.numbers.accounting.patterns);\n      if (cleanNumber) {\n        negative = true;\n        number = cleanNumber;\n      }\n    }\n  }\n  return {\n    number: number,\n    negative: negative\n  };\n}\nfunction cleanLiterals(number, formatOptions) {\n  const literals = formatOptions.literals;\n  let result = number;\n  if (literals) {\n    for (let idx = 0; idx < literals.length; idx++) {\n      result = result.replace(literals[idx], EMPTY);\n    }\n  }\n  return result;\n}\nfunction divideBy100(number) {\n  const strNumber = String(number);\n  const pointIndex = strNumber.indexOf(POINT);\n  const zeroesCount = 2;\n  let result = number / Math.pow(10, zeroesCount);\n  if (pointIndex === -1 || String(result).length <= strNumber.length + zeroesCount) {\n    return result;\n  }\n  const fractionDigits = strNumber.length - pointIndex + 1 + zeroesCount;\n  return parseFloat(result.toFixed(fractionDigits));\n}\nexport default function parseNumber(value, locale = DEFAULT_LOCALE, format = {}) {\n  if (!value && value !== 0) {\n    return null;\n  }\n  if (isNumber(value)) {\n    return value;\n  }\n  const info = localeInfo(locale);\n  const symbols = info.numbers.symbols;\n  let number = value.toString();\n  let formatOptions = format || {};\n  let isPercent;\n  if (isString(format)) {\n    formatOptions = {\n      format: format\n    };\n    setFormatLiterals(formatOptions);\n    number = cleanLiterals(number, formatOptions);\n    setStyleOptions(formatOptions, info);\n  }\n  if (formatOptions.style === PERCENT || number.indexOf(symbols.percentSign) > -1) {\n    number = number.replace(symbols.percentSign, EMPTY);\n    isPercent = true;\n  }\n  if (exponentRegExp.test(number)) {\n    number = parseFloat(number.replace(symbols.decimal, POINT));\n    return isNaN(number) ? null : number;\n  }\n  const {\n    negative: negativeCurrency,\n    number: currencyNumber\n  } = cleanCurrencyNumber(number, info, formatOptions);\n  number = String(currencyNumber).trim();\n  const negativeSignIndex = number.indexOf(\"-\");\n  if (negativeSignIndex > 0) {\n    return null;\n  }\n  let isNegative = negativeSignIndex > -1;\n  isNegative = negativeCurrency !== undefined ? negativeCurrency : isNegative;\n  number = number.replace(\"-\", EMPTY).replace(nonBreakingSpaceRegExp, \" \").split(symbols.group.replace(nonBreakingSpaceRegExp, \" \")).join(EMPTY).replace(symbols.decimal, POINT);\n  number = parseFloat(number);\n  if (isNaN(number)) {\n    number = null;\n  } else if (isNegative) {\n    number *= -1;\n  }\n  if (number && isPercent) {\n    number = divideBy100(number);\n  }\n  return number;\n}","map":{"version":3,"names":["localeInfo","localeCurrency","currencyDisplays","PERCENT","NUMBER_PLACEHOLDER","CURRENCY_PLACEHOLDER","DEFAULT_LOCALE","EMPTY","POINT","setStyleOptions","setFormatLiterals","isNumber","isCurrencyStyle","formatOptions","isString","exponentRegExp","nonBreakingSpaceRegExp","cleanNegativePattern","number","patterns","length","parts","replace","split","indexOf","cleanCurrencyNumber","value","info","format","options","isCurrency","style","negative","currency","displays","idx","display","includes","cleanNumber","numbers","accounting","cleanLiterals","literals","result","divideBy100","strNumber","String","pointIndex","zeroesCount","Math","pow","fractionDigits","parseFloat","toFixed","parseNumber","locale","symbols","toString","isPercent","percentSign","test","decimal","isNaN","negativeCurrency","currencyNumber","trim","negativeSignIndex","isNegative","undefined","group","join"],"sources":["/Users/teqnoid/Projects/teachingchannel/node_modules/@progress/kendo-intl/dist/es2015/numbers/parse-number.js"],"sourcesContent":["import { localeInfo, localeCurrency, currencyDisplays } from '../cldr';\nimport { PERCENT, NUMBER_PLACEHOLDER, CURRENCY_PLACEHOLDER, DEFAULT_LOCALE, EMPTY, POINT } from '../common/constants';\nimport { setStyleOptions, setFormatLiterals } from './utils';\nimport isNumber from '../common/is-number';\nimport isCurrencyStyle from './is-currency-style';\nimport formatOptions from './format-options';\nimport isString from '../common/is-string';\n\nconst exponentRegExp = /[eE][-+]?[0-9]+/;\nconst nonBreakingSpaceRegExp = /\\u00A0/g;\n\nfunction cleanNegativePattern(number, patterns) {\n    if (patterns.length > 1) {\n        const parts = (patterns[1] || EMPTY).replace(CURRENCY_PLACEHOLDER, EMPTY).split(NUMBER_PLACEHOLDER);\n        if (number.indexOf(parts[0]) > -1 && number.indexOf(parts[1]) > -1) {\n            return number.replace(parts[0], EMPTY).replace(parts[1], EMPTY);\n        }\n    }\n}\n\nfunction cleanCurrencyNumber(value, info, format) {\n    const options = formatOptions(format) || {};\n    let isCurrency = isCurrencyStyle(options.style);\n    let number = value;\n    let negative;\n\n    const currency = options.currency || localeCurrency(info, isCurrency);\n\n    if (currency) {\n        const displays = currencyDisplays(info, currency, isCurrency);\n        if (displays) {\n            for (let idx = 0; idx < displays.length; idx++) {\n                let display = displays[idx];\n                if (number.includes(display)) {\n                    number = number.replace(display, EMPTY);\n                    isCurrency = true;\n                    break;\n                }\n            }\n        }\n\n        if (isCurrency) {\n            const cleanNumber = cleanNegativePattern(number, info.numbers.currency.patterns) ||\n                cleanNegativePattern(number, info.numbers.accounting.patterns);\n\n            if (cleanNumber) {\n                negative = true;\n                number = cleanNumber;\n            }\n\n        }\n    }\n\n    return {\n        number: number,\n        negative: negative\n    };\n}\n\nfunction cleanLiterals(number, formatOptions) {\n    const literals = formatOptions.literals;\n    let result = number;\n\n    if (literals) {\n        for (let idx = 0; idx < literals.length; idx++) {\n            result = result.replace(literals[idx], EMPTY);\n        }\n    }\n\n    return result;\n}\n\nfunction divideBy100(number) {\n    const strNumber = String(number);\n    const pointIndex = strNumber.indexOf(POINT);\n    const zeroesCount = 2;\n    let result = number / Math.pow(10, zeroesCount);\n\n    if (pointIndex === -1 || String(result).length <= strNumber.length + zeroesCount) {\n        return result;\n    }\n\n    const fractionDigits = strNumber.length - pointIndex + 1 + zeroesCount;\n    return parseFloat(result.toFixed(fractionDigits));\n}\n\nexport default function parseNumber(value, locale = DEFAULT_LOCALE, format = {}) {\n    if (!value && value !== 0) {\n        return null;\n    }\n\n    if (isNumber(value)) {\n        return value;\n    }\n\n    const info = localeInfo(locale);\n    const symbols = info.numbers.symbols;\n\n    let number = value.toString();\n    let formatOptions = format || {};\n    let isPercent;\n\n    if (isString(format)) {\n        formatOptions = { format: format };\n        setFormatLiterals(formatOptions);\n        number = cleanLiterals(number, formatOptions);\n\n        setStyleOptions(formatOptions, info);\n    }\n\n    if (formatOptions.style === PERCENT || number.indexOf(symbols.percentSign) > -1) {\n        number = number.replace(symbols.percentSign, EMPTY);\n        isPercent = true;\n    }\n\n    if (exponentRegExp.test(number)) {\n        number = parseFloat(number.replace(symbols.decimal, POINT));\n        return isNaN(number) ? null : number;\n    }\n\n    const { negative: negativeCurrency, number: currencyNumber } = cleanCurrencyNumber(number, info, formatOptions);\n    number = String(currencyNumber).trim();\n\n    const negativeSignIndex = number.indexOf(\"-\");\n    if (negativeSignIndex > 0) {\n        return null;\n    }\n\n    let isNegative = negativeSignIndex > -1;\n\n    isNegative = negativeCurrency !== undefined ? negativeCurrency : isNegative;\n\n    number = number.replace(\"-\", EMPTY)\n          .replace(nonBreakingSpaceRegExp, \" \")\n          .split(symbols.group.replace(nonBreakingSpaceRegExp, \" \")).join(EMPTY)\n          .replace(symbols.decimal, POINT);\n\n    number = parseFloat(number);\n\n    if (isNaN(number)) {\n        number = null;\n    } else if (isNegative) {\n        number *= -1;\n    }\n\n    if (number && isPercent) {\n        number = divideBy100(number);\n    }\n\n    return number;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}