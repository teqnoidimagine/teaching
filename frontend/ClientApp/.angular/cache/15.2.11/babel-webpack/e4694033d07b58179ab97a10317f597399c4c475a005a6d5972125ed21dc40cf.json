{"ast":null,"code":"/* tslint:disable:object-literal-sort-keys max-line-length */\nimport { isWindowAvailable } from './util';\nconst agentRxs = {\n  wp: /(Windows Phone(?: OS)?)\\s(\\d+)\\.(\\d+(\\.\\d+)?)/,\n  fire: /(Silk)\\/(\\d+)\\.(\\d+(\\.\\d+)?)/,\n  android: /(Android|Android.*(?:Opera|Firefox).*?\\/)\\s*(\\d+)(\\.(\\d+(\\.\\d+)?))?/,\n  iphone: /(iPhone|iPod).*OS\\s+(\\d+)[\\._]([\\d\\._]+)/,\n  ipad: /(iPad).*OS\\s+(\\d+)[\\._]([\\d_]+)/,\n  meego: /(MeeGo).+NokiaBrowser\\/(\\d+)\\.([\\d\\._]+)/,\n  webos: /(webOS)\\/(\\d+)\\.(\\d+(\\.\\d+)?)/,\n  blackberry: /(BlackBerry|BB10).*?Version\\/(\\d+)\\.(\\d+(\\.\\d+)?)/,\n  playbook: /(PlayBook).*?Tablet\\s*OS\\s*(\\d+)\\.(\\d+(\\.\\d+)?)/,\n  windows: /(MSIE)\\s+(\\d+)\\.(\\d+(\\.\\d+)?)/,\n  tizen: /(tizen).*?Version\\/(\\d+)\\.(\\d+(\\.\\d+)?)/i,\n  sailfish: /(sailfish).*rv:(\\d+)\\.(\\d+(\\.\\d+)?).*firefox/i,\n  ffos: /(Mobile).*rv:(\\d+)\\.(\\d+(\\.\\d+)?).*Firefox/\n};\nconst osRxs = {\n  ios: /^i(phone|pad|pod)$/i,\n  android: /^android|fire$/i,\n  blackberry: /^blackberry|playbook/i,\n  windows: /windows/,\n  wp: /wp/,\n  flat: /sailfish|ffos|tizen/i,\n  meego: /meego/\n};\nconst desktopBrowserRxs = {\n  edge: /(edge)[ \\/]([\\w.]+)/i,\n  webkit: /(chrome)[ \\/]([\\w.]+)/i,\n  safari: /(webkit)[ \\/]([\\w.]+)/i,\n  opera: /(opera)(?:.*version|)[ \\/]([\\w.]+)/i,\n  msie: /(msie\\s|trident.*? rv:)([\\w.]+)/i,\n  mozilla: /(mozilla)(?:.*? rv:([\\w.]+)|)/i\n};\nconst mobileBrowserRxs = {\n  omini: /Opera\\sMini/i,\n  omobile: /Opera\\sMobi/i,\n  firefox: /Firefox|Fennec/i,\n  mobilesafari: /version\\/.*safari/i,\n  ie: /MSIE|Windows\\sPhone/i,\n  chrome: /chrome|crios/i,\n  webkit: /webkit/i\n};\nconst testRx = (agent, rxs, dflt) => {\n  for (let rx in rxs) {\n    if (rxs.hasOwnProperty(rx) && rxs[rx].test(agent)) {\n      return rx;\n    }\n  }\n  return dflt !== undefined ? dflt : agent;\n};\n/**\n * A function that detects the mobile browser based on the given UserAgent.\n *\n * @param ua - The user agent string.\n * @returns - A browser info object containing the browser type and version.\n *\n * @example\n * ```ts-no-run\n * const userAgent = 'Mozilla/5.0 (Linux; Android 8.0.0) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Focus/1.3 Chrome/61.0.3163.81 Mobile Safari/537.36';\n * detectMobileOS(userAgent); // { android: true };\n * ```\n */\nexport const detectMobileOS = ua => {\n  let minorVersion;\n  let match = [];\n  for (let agent in agentRxs) {\n    if (agentRxs.hasOwnProperty(agent)) {\n      match = ua.match(agentRxs[agent]);\n      if (!match) {\n        continue;\n      }\n      if (agent === 'windows' && 'plugins' in window.navigator) {\n        return null;\n      } // Break if not Metro/Mobile Windows\n      const os = {};\n      os.device = agent;\n      os.browser = testRx(ua, mobileBrowserRxs, 'default');\n      os.name = testRx(agent, osRxs);\n      os[os.name] = true;\n      os.majorVersion = match[2];\n      os.minorVersion = match[3] ? match[3].replace('_', '.') : '.0';\n      minorVersion = os.minorVersion.replace('.', '').substr(0, 2);\n      os.flatVersion = os.majorVersion + minorVersion + new Array(3 - (minorVersion.length < 3 ? minorVersion.length : 2)).join('0');\n      os.cordova = typeof window.PhoneGap !== undefined || typeof window.cordova !== undefined; // Use file protocol to detect appModes.\n      os.appMode = window.navigator.standalone || /file|local|wmapp/.test(window.location.protocol) || os.cordova; // Use file protocol to detect appModes.\n      return os;\n    }\n  }\n  return null;\n};\n/**\n * A function that detects the desktop browser based on the given UserAgent.\n *\n * @param ua - The user agent string.\n * @returns - A browser info object containing the browser type and version.\n *\n * @example\n * ```ts-no-run\n * const userAgent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.151 Safari/535.19';\n * detectDesktopBrowser(userAgent); // { chrome: true, webkit: true };\n * ```\n */\nexport const detectDesktopBrowser = ua => {\n  let browserInfo = null;\n  let match = [];\n  for (let agent in desktopBrowserRxs) {\n    if (desktopBrowserRxs.hasOwnProperty(agent)) {\n      match = ua.match(desktopBrowserRxs[agent]);\n      if (match) {\n        browserInfo = {};\n        browserInfo[agent] = true;\n        browserInfo[match[1].toLowerCase().split(' ')[0].split('/')[0]] = true;\n        browserInfo.version = parseInt(document.documentMode || match[2], 10);\n        break;\n      }\n    }\n  }\n  return browserInfo;\n};\nconst userAgent = isWindowAvailable() && window.navigator ? window.navigator.userAgent : null;\n/**\n * A constant holding the desktop browser info. The variable persists the result of the detectDesktopBrowser(window.navigator.userAgent) call.\n * If no desktop browser is detected, the constant will be `null`.\n */\nexport const browser = userAgent ? detectDesktopBrowser(userAgent) : null;\n/**\n * A constant holding the mobile OS info. The variable persists the result of the detectMobileOS(window.navigator.userAgent) call.\n * If no mobile OS is detected, the constant will be `null`.\n */\nexport const mobileOS = userAgent ? detectMobileOS(userAgent) : null;\n/**\n * A constant reporting the browser `touch` events support.\n */\nexport const touch = isWindowAvailable() && 'ontouchstart' in window;\n/**\n * @hidden\n * A constant reporting the browser `msPointers` events support.\n */\nexport const msPointers = browser && !browser.chrome && window.MSPointerEvent;\n/**\n * A constant reporting the browser `pointers` events support.\n */\nexport const pointers = browser && !browser.chrome && window.PointerEvent;\n/**\n * A constant reporting whether the browser is touch enabled.\n */\nexport const touchEnabled = mobileOS && (touch || msPointers || pointers);","map":{"version":3,"names":["isWindowAvailable","agentRxs","wp","fire","android","iphone","ipad","meego","webos","blackberry","playbook","windows","tizen","sailfish","ffos","osRxs","ios","flat","desktopBrowserRxs","edge","webkit","safari","opera","msie","mozilla","mobileBrowserRxs","omini","omobile","firefox","mobilesafari","ie","chrome","testRx","agent","rxs","dflt","rx","hasOwnProperty","test","undefined","detectMobileOS","ua","minorVersion","match","window","navigator","os","device","browser","name","majorVersion","replace","substr","flatVersion","Array","length","join","cordova","PhoneGap","appMode","standalone","location","protocol","detectDesktopBrowser","browserInfo","toLowerCase","split","version","parseInt","document","documentMode","userAgent","mobileOS","touch","msPointers","MSPointerEvent","pointers","PointerEvent","touchEnabled"],"sources":["/Users/teqnoid/Projects/teachingchannel/node_modules/@progress/kendo-common/dist/es2015/support.js"],"sourcesContent":["/* tslint:disable:object-literal-sort-keys max-line-length */\nimport { isWindowAvailable } from './util';\nconst agentRxs = {\n    wp: /(Windows Phone(?: OS)?)\\s(\\d+)\\.(\\d+(\\.\\d+)?)/,\n    fire: /(Silk)\\/(\\d+)\\.(\\d+(\\.\\d+)?)/,\n    android: /(Android|Android.*(?:Opera|Firefox).*?\\/)\\s*(\\d+)(\\.(\\d+(\\.\\d+)?))?/,\n    iphone: /(iPhone|iPod).*OS\\s+(\\d+)[\\._]([\\d\\._]+)/,\n    ipad: /(iPad).*OS\\s+(\\d+)[\\._]([\\d_]+)/,\n    meego: /(MeeGo).+NokiaBrowser\\/(\\d+)\\.([\\d\\._]+)/,\n    webos: /(webOS)\\/(\\d+)\\.(\\d+(\\.\\d+)?)/,\n    blackberry: /(BlackBerry|BB10).*?Version\\/(\\d+)\\.(\\d+(\\.\\d+)?)/,\n    playbook: /(PlayBook).*?Tablet\\s*OS\\s*(\\d+)\\.(\\d+(\\.\\d+)?)/,\n    windows: /(MSIE)\\s+(\\d+)\\.(\\d+(\\.\\d+)?)/,\n    tizen: /(tizen).*?Version\\/(\\d+)\\.(\\d+(\\.\\d+)?)/i,\n    sailfish: /(sailfish).*rv:(\\d+)\\.(\\d+(\\.\\d+)?).*firefox/i,\n    ffos: /(Mobile).*rv:(\\d+)\\.(\\d+(\\.\\d+)?).*Firefox/\n};\nconst osRxs = {\n    ios: /^i(phone|pad|pod)$/i,\n    android: /^android|fire$/i,\n    blackberry: /^blackberry|playbook/i,\n    windows: /windows/,\n    wp: /wp/,\n    flat: /sailfish|ffos|tizen/i,\n    meego: /meego/\n};\nconst desktopBrowserRxs = {\n    edge: /(edge)[ \\/]([\\w.]+)/i,\n    webkit: /(chrome)[ \\/]([\\w.]+)/i,\n    safari: /(webkit)[ \\/]([\\w.]+)/i,\n    opera: /(opera)(?:.*version|)[ \\/]([\\w.]+)/i,\n    msie: /(msie\\s|trident.*? rv:)([\\w.]+)/i,\n    mozilla: /(mozilla)(?:.*? rv:([\\w.]+)|)/i\n};\nconst mobileBrowserRxs = {\n    omini: /Opera\\sMini/i,\n    omobile: /Opera\\sMobi/i,\n    firefox: /Firefox|Fennec/i,\n    mobilesafari: /version\\/.*safari/i,\n    ie: /MSIE|Windows\\sPhone/i,\n    chrome: /chrome|crios/i,\n    webkit: /webkit/i\n};\nconst testRx = (agent, rxs, dflt) => {\n    for (let rx in rxs) {\n        if (rxs.hasOwnProperty(rx) && rxs[rx].test(agent)) {\n            return rx;\n        }\n    }\n    return dflt !== undefined ? dflt : agent;\n};\n/**\n * A function that detects the mobile browser based on the given UserAgent.\n *\n * @param ua - The user agent string.\n * @returns - A browser info object containing the browser type and version.\n *\n * @example\n * ```ts-no-run\n * const userAgent = 'Mozilla/5.0 (Linux; Android 8.0.0) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Focus/1.3 Chrome/61.0.3163.81 Mobile Safari/537.36';\n * detectMobileOS(userAgent); // { android: true };\n * ```\n */\nexport const detectMobileOS = (ua) => {\n    let minorVersion;\n    let match = [];\n    for (let agent in agentRxs) {\n        if (agentRxs.hasOwnProperty(agent)) {\n            match = ua.match(agentRxs[agent]);\n            if (!match) {\n                continue;\n            }\n            if (agent === 'windows' && 'plugins' in window.navigator) {\n                return null;\n            } // Break if not Metro/Mobile Windows\n            const os = {};\n            os.device = agent;\n            os.browser = testRx(ua, mobileBrowserRxs, 'default');\n            os.name = testRx(agent, osRxs);\n            os[os.name] = true;\n            os.majorVersion = match[2];\n            os.minorVersion = match[3] ? match[3].replace('_', '.') : '.0';\n            minorVersion = os.minorVersion.replace('.', '').substr(0, 2);\n            os.flatVersion = os.majorVersion + minorVersion +\n                (new Array(3 - (minorVersion.length < 3 ? minorVersion.length : 2)).join('0'));\n            os.cordova = typeof window.PhoneGap !== undefined\n                || typeof window.cordova !== undefined; // Use file protocol to detect appModes.\n            os.appMode = window.navigator.standalone\n                || (/file|local|wmapp/).test(window.location.protocol)\n                || os.cordova; // Use file protocol to detect appModes.\n            return os;\n        }\n    }\n    return null;\n};\n/**\n * A function that detects the desktop browser based on the given UserAgent.\n *\n * @param ua - The user agent string.\n * @returns - A browser info object containing the browser type and version.\n *\n * @example\n * ```ts-no-run\n * const userAgent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.151 Safari/535.19';\n * detectDesktopBrowser(userAgent); // { chrome: true, webkit: true };\n * ```\n */\nexport const detectDesktopBrowser = (ua) => {\n    let browserInfo = null;\n    let match = [];\n    for (let agent in desktopBrowserRxs) {\n        if (desktopBrowserRxs.hasOwnProperty(agent)) {\n            match = ua.match(desktopBrowserRxs[agent]);\n            if (match) {\n                browserInfo = {};\n                browserInfo[agent] = true;\n                browserInfo[match[1].toLowerCase().split(' ')[0].split('/')[0]] = true;\n                browserInfo.version = parseInt(document.documentMode || match[2], 10);\n                break;\n            }\n        }\n    }\n    return browserInfo;\n};\nconst userAgent = isWindowAvailable() && window.navigator ? window.navigator.userAgent : null;\n/**\n * A constant holding the desktop browser info. The variable persists the result of the detectDesktopBrowser(window.navigator.userAgent) call.\n * If no desktop browser is detected, the constant will be `null`.\n */\nexport const browser = userAgent ? detectDesktopBrowser(userAgent) : null;\n/**\n * A constant holding the mobile OS info. The variable persists the result of the detectMobileOS(window.navigator.userAgent) call.\n * If no mobile OS is detected, the constant will be `null`.\n */\nexport const mobileOS = userAgent ? detectMobileOS(userAgent) : null;\n/**\n * A constant reporting the browser `touch` events support.\n */\nexport const touch = isWindowAvailable() && 'ontouchstart' in window;\n/**\n * @hidden\n * A constant reporting the browser `msPointers` events support.\n */\nexport const msPointers = browser && !browser.chrome && window.MSPointerEvent;\n/**\n * A constant reporting the browser `pointers` events support.\n */\nexport const pointers = browser && !browser.chrome && window.PointerEvent;\n/**\n * A constant reporting whether the browser is touch enabled.\n */\nexport const touchEnabled = mobileOS && (touch || msPointers || pointers);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}