{"ast":null,"code":"import { CURRENCY, ACCOUNTING, DECIMAL, PERCENT, SCIENTIFIC } from '../common/constants';\nimport isString from '../common/is-string';\nconst standardFormatRegExp = /^(n|c|p|e|a)(\\d*)$/i;\nfunction standardFormatOptions(format) {\n  const formatAndPrecision = standardFormatRegExp.exec(format);\n  if (formatAndPrecision) {\n    const options = {\n      style: DECIMAL\n    };\n    let style = formatAndPrecision[1].toLowerCase();\n    if (style === \"c\") {\n      options.style = CURRENCY;\n    } else if (style === \"a\") {\n      options.style = ACCOUNTING;\n    } else if (style === \"p\") {\n      options.style = PERCENT;\n    } else if (style === \"e\") {\n      options.style = SCIENTIFIC;\n    }\n    if (formatAndPrecision[2]) {\n      options.minimumFractionDigits = options.maximumFractionDigits = parseInt(formatAndPrecision[2], 10);\n    }\n    return options;\n  }\n}\nexport default function formatOptions(format) {\n  let options;\n  if (isString(format)) {\n    options = standardFormatOptions(format);\n  } else {\n    options = format;\n  }\n  return options;\n}","map":{"version":3,"names":["CURRENCY","ACCOUNTING","DECIMAL","PERCENT","SCIENTIFIC","isString","standardFormatRegExp","standardFormatOptions","format","formatAndPrecision","exec","options","style","toLowerCase","minimumFractionDigits","maximumFractionDigits","parseInt","formatOptions"],"sources":["/Users/teqnoid/Projects/teachingchannel/node_modules/@progress/kendo-intl/dist/es2015/numbers/format-options.js"],"sourcesContent":["import { CURRENCY, ACCOUNTING, DECIMAL, PERCENT, SCIENTIFIC } from '../common/constants';\nimport isString from '../common/is-string';\n\nconst standardFormatRegExp = /^(n|c|p|e|a)(\\d*)$/i;\n\nfunction standardFormatOptions(format) {\n    const formatAndPrecision = standardFormatRegExp.exec(format);\n\n    if (formatAndPrecision) {\n        const options = {\n            style: DECIMAL\n        };\n\n        let style = formatAndPrecision[1].toLowerCase();\n\n        if (style === \"c\") {\n            options.style = CURRENCY;\n        } else if (style === \"a\") {\n            options.style = ACCOUNTING;\n        } else if (style === \"p\") {\n            options.style = PERCENT;\n        } else if (style === \"e\") {\n            options.style = SCIENTIFIC;\n        }\n\n        if (formatAndPrecision[2]) {\n            options.minimumFractionDigits = options.maximumFractionDigits = parseInt(formatAndPrecision[2], 10);\n        }\n\n        return options;\n    }\n}\n\nexport default function formatOptions(format) {\n    let options;\n    if (isString(format)) {\n        options = standardFormatOptions(format);\n    } else {\n        options = format;\n    }\n\n    return options;\n}"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,UAAU,EAAEC,OAAO,EAAEC,OAAO,EAAEC,UAAU,QAAQ,qBAAqB;AACxF,OAAOC,QAAQ,MAAM,qBAAqB;AAE1C,MAAMC,oBAAoB,GAAG,qBAAqB;AAElD,SAASC,qBAAqB,CAACC,MAAM,EAAE;EACnC,MAAMC,kBAAkB,GAAGH,oBAAoB,CAACI,IAAI,CAACF,MAAM,CAAC;EAE5D,IAAIC,kBAAkB,EAAE;IACpB,MAAME,OAAO,GAAG;MACZC,KAAK,EAAEV;IACX,CAAC;IAED,IAAIU,KAAK,GAAGH,kBAAkB,CAAC,CAAC,CAAC,CAACI,WAAW,EAAE;IAE/C,IAAID,KAAK,KAAK,GAAG,EAAE;MACfD,OAAO,CAACC,KAAK,GAAGZ,QAAQ;IAC5B,CAAC,MAAM,IAAIY,KAAK,KAAK,GAAG,EAAE;MACtBD,OAAO,CAACC,KAAK,GAAGX,UAAU;IAC9B,CAAC,MAAM,IAAIW,KAAK,KAAK,GAAG,EAAE;MACtBD,OAAO,CAACC,KAAK,GAAGT,OAAO;IAC3B,CAAC,MAAM,IAAIS,KAAK,KAAK,GAAG,EAAE;MACtBD,OAAO,CAACC,KAAK,GAAGR,UAAU;IAC9B;IAEA,IAAIK,kBAAkB,CAAC,CAAC,CAAC,EAAE;MACvBE,OAAO,CAACG,qBAAqB,GAAGH,OAAO,CAACI,qBAAqB,GAAGC,QAAQ,CAACP,kBAAkB,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IACvG;IAEA,OAAOE,OAAO;EAClB;AACJ;AAEA,eAAe,SAASM,aAAa,CAACT,MAAM,EAAE;EAC1C,IAAIG,OAAO;EACX,IAAIN,QAAQ,CAACG,MAAM,CAAC,EAAE;IAClBG,OAAO,GAAGJ,qBAAqB,CAACC,MAAM,CAAC;EAC3C,CAAC,MAAM;IACHG,OAAO,GAAGH,MAAM;EACpB;EAEA,OAAOG,OAAO;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}